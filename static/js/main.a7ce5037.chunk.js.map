{"version":3,"sources":["TodoItem.jsx","TodoList.jsx","actions.jsx","App.jsx","serviceWorker.js","reducers.jsx","index.jsx"],"names":["TodoItem","className","this","props","completed","type","checked","onChange","handleToggleTodo","title","onClick","handleDeleteTodo","Component","TodoList","todos","map","todo","key","id","deleteTodo","toggleTodo","mapDispatchToProps","payload","connect","App","state","todosList","value","handleInput","event","setState","target","handleCreateTodo","addTodo","counter","i","length","placeholder","autoFocus","onKeyDown","exact","path","render","handleDeleteCompletedTodos","clearCompletedTodos","filter","to","activeClassName","todoTitle","userId","Math","floor","random","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+qBAqBeA,E,4JAlBb,WACE,OACE,wBAAIC,UAAWC,KAAKC,MAAMC,UAAY,YAAc,IAClD,yBAAKH,UAAU,QACb,2BACEA,UAAU,SACVI,KAAK,WACLC,QAASJ,KAAKC,MAAMC,UACpBG,SAAUL,KAAKC,MAAMK,mBAEvB,+BAAQN,KAAKC,MAAMM,OACnB,4BAAQR,UAAU,UAAUS,QAASR,KAAKC,MAAMQ,yB,GAZnCC,a,QCGjBC,E,4JACJ,WAAU,IAAD,OACP,OACE,6BAASZ,UAAU,QACjB,wBAAIA,UAAU,aACXC,KAAKC,MAAMW,MAAMC,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVP,iBAAkB,kBAAM,EAAKR,MAAMgB,WAAWH,EAAKE,KACnDT,MAAOO,EAAKP,MACZL,UAAWY,EAAKZ,UAChBI,iBAAkB,kBAAM,EAAKL,MAAMiB,WAAWJ,EAAKE,gB,GAX1CN,aAoBjBS,EAAqB,CACzBF,WCFwB,SAAAD,GACxB,MAAO,CACLb,KAvBuB,cAwBvBiB,QAASJ,IDAXE,WCtBwB,SAAAF,GACxB,MAAO,CACLb,KALuB,cAMvBiB,QAASJ,KDqBEK,cAAQ,KAAMF,EAAdE,CAAkCV,G,eErB3CW,E,4MACJC,MAAQ,CACNX,MAAOY,EACPC,MAAO,I,EAGTC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAEH,MAAOE,EAAME,OAAOJ,S,EAGtCK,iBAAmB,SAAAH,GACC,UAAdA,EAAMZ,MACR,EAAKd,MAAM8B,QAAQ,EAAKR,MAAME,OAC9B,EAAKG,SAAS,CAAEH,MAAO,O,4CAI3B,WAEE,IAFQ,IAAD,OACHO,EAAU,EACLC,EAAI,EAAGA,EAAIjC,KAAKC,MAAMW,MAAMsB,OAAQD,KACL,IAAlCjC,KAAKC,MAAMW,MAAMqB,GAAG/B,WACtB8B,IAGJ,OACE,6BAASjC,UAAU,WACjB,4BAAQA,UAAU,UAChB,yCACA,2BACEA,UAAU,WACVoC,YAAY,yBACZC,WAAS,EACTX,MAAOzB,KAAKuB,MAAME,MAClBpB,SAAUL,KAAK0B,YACfW,UAAWrC,KAAK8B,oBAGpB,kBAAC,IAAD,CACEQ,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,kBAAC,EAAD,CACAC,2BAA4B,kBAAM,EAAKxC,MAAMyC,qBAC7C9B,MAAO,EAAKX,MAAMW,WAItB,kBAAC,IAAD,CACE0B,OAAK,EACLC,KAAK,UACLC,OAAQ,kBACN,kBAAC,EAAD,CACAC,2BAA4B,kBAAM,EAAKxC,MAAMyC,qBAC7C9B,MAAO,EAAKX,MAAMW,MAAM+B,QAAO,SAAA7B,GAAI,OAAuB,IAAnBA,EAAKZ,kBAIhD,kBAAC,IAAD,CACEoC,OAAK,EACLC,KAAK,aACLC,OAAQ,kBACN,kBAAC,EAAD,CACAC,2BAA4B,kBAAM,EAAKxC,MAAMyC,qBAC7C9B,MAAO,EAAKX,MAAMW,MAAM+B,QAAO,SAAA7B,GAAI,OAAuB,IAAnBA,EAAKZ,kBAIhD,4BAAQH,UAAU,UAChB,0BAAMA,UAAU,cACd,gCAASiC,GADX,iBAGA,wBAAIjC,UAAU,WACZ,4BACE,kBAAC,IAAD,CAAS6C,GAAG,IAAIC,gBAAgB,WAAWP,OAAK,GAAhD,QAIF,4BACE,kBAAC,IAAD,CAASM,GAAG,UAAUC,gBAAgB,YAAtC,WAIF,4BACE,kBAAC,IAAD,CAASD,GAAG,aAAaC,gBAAgB,YAAzC,eAKJ,4BACE9C,UAAU,kBACVS,QAASR,KAAKC,MAAMyC,qBAFtB,yB,GAxFQhC,aA0GZS,EAAqB,CACzBuB,oBDpFiC,WAC/B,MAAO,CACHvC,KAhC6B,0BCmHnC4B,QDxGqB,SAAAe,GACrB,MAAO,CACL3C,KAdoB,WAepBiB,QAAS,CACP2B,OAAQ,EACR/B,GAAIgC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpB3C,MAAOuC,EACP5C,WAAW,MCoGFmB,eAXS,SAACE,GACvB,MAAO,CACLX,MAAOW,EAAMX,SASuBO,EAAzBE,CAA6CC,GC3GxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCVAC,EAAe,CACnB5C,MAAOY,GAoCMiC,MAjCf,WAAgD,IAA/BlC,EAA8B,uDAAtBiC,EAAcE,EAAQ,uCAC7C,OAAQA,EAAOvD,MACb,IHZuB,cGarB,OAAO,2BACFoB,GADL,IAEEX,MAAOW,EAAMX,MAAMC,KAAI,SAAAC,GAAI,OACzBA,EAAKE,KAAO0C,EAAOtC,QAAnB,2BACSN,GADT,IACeZ,WAAYY,EAAKZ,YAC5BY,OAGV,IHvBoB,WGwBlB,OAAO,2BACFS,GADL,IAEEX,MAAM,GAAD,mBAAMW,EAAMX,OAAZ,CAAmB8C,EAAOtC,YAGnC,IH1BuB,cG2BnB,OAAO,2BACAG,GADP,IAEIX,MAAOW,EAAMX,MAAM+B,QAAO,SAAA7B,GAAI,OAAIA,EAAKE,KAAO0C,EAAOtC,aAG7D,IHlCiC,wBGmC7B,OAAO,2BACAG,GADP,IAEIX,MAAOW,EAAMX,MAAM+B,QAAO,SAAA7B,GAAI,OAAuB,IAAnBA,EAAKZ,eAE/C,QACI,OAAOqB,IC/BToC,EAAQC,YAAYH,GAE1BI,IAASrB,OACL,kBAAC,IAAD,CAAUmB,MAAOA,GACnB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFG,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7ce5037.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n    return (\r\n      <li className={this.props.completed ? \"completed\" : \"\"}>\r\n        <div className=\"view\">\r\n          <input\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            checked={this.props.completed}\r\n            onChange={this.props.handleToggleTodo}\r\n          />\r\n          <label>{this.props.title}</label>\r\n          <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem\r\n\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { deleteTodo, toggleTodo } from \"./actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {this.props.todos.map(todo => (\r\n            <TodoItem\r\n              key={todo.id}\r\n              handleDeleteTodo={() => this.props.deleteTodo(todo.id)}\r\n              title={todo.title}\r\n              completed={todo.completed}\r\n              handleToggleTodo={() => this.props.toggleTodo(todo.id)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  deleteTodo,\r\n  toggleTodo\r\n}\r\nexport default connect(null, mapDispatchToProps)(TodoList)\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport const toggleTodo = id => {\r\n  return {\r\n    type: TOGGLE_TODO,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const addTodo = todoTitle => {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: {\r\n      userId: 1,\r\n      id: Math.floor(Math.random() * 1000000),\r\n      title: todoTitle,\r\n      completed: false\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteTodo = id => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const clearCompletedTodos = () => {\r\n    return {\r\n        type: CLEAR_COMPLETED_TODOS\r\n    };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./index.css\";\r\nimport todosList from \"./todos.json\";\r\nimport TodoList from \"./TodoList\";\r\nimport { Route, NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { clearCompletedTodos, addTodo } from \"./actions\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: todosList,\r\n    value: \"\"\r\n  };\r\n\r\n  handleInput = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  handleCreateTodo = event => {\r\n    if (event.key === \"Enter\") {\r\n      this.props.addTodo(this.state.value);\r\n      this.setState({ value: \"\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let counter = 0;\r\n    for (let i = 0; i < this.props.todos.length; i++) {\r\n      if (this.props.todos[i].completed === false) {\r\n        counter++;\r\n      }\r\n    }\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <header className=\"header\">\r\n          <h1>Todo List</h1>\r\n          <input\r\n            className=\"new-todo\"\r\n            placeholder=\"What needs to be done?\"\r\n            autoFocus\r\n            value={this.state.value}\r\n            onChange={this.handleInput}\r\n            onKeyDown={this.handleCreateTodo}\r\n          />\r\n        </header>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <TodoList\r\n            handleDeleteCompletedTodos={() => this.props.clearCompletedTodos}\r\n            todos={this.props.todos}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/active\"\r\n          render={() => (\r\n            <TodoList\r\n            handleDeleteCompletedTodos={() => this.props.clearCompletedTodos}\r\n            todos={this.props.todos.filter(todo => todo.completed !== true)}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/completed\"\r\n          render={() => (\r\n            <TodoList\r\n            handleDeleteCompletedTodos={() => this.props.clearCompletedTodos}\r\n            todos={this.props.todos.filter(todo => todo.completed === true)}\r\n            />\r\n          )}\r\n        />\r\n        <footer className=\"footer\">\r\n          <span className=\"todo-count\">\r\n            <strong>{counter}</strong> item(s) left\r\n          </span>\r\n          <ul className=\"filters\">\r\n            <li>\r\n              <NavLink to=\"/\" activeClassName=\"selected\" exact>\r\n                All\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/active\" activeClassName=\"selected\">\r\n                Active\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/completed\" activeClassName=\"selected\">\r\n                Completed\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n          <button\r\n            className=\"clear-completed\"\r\n            onClick={this.props.clearCompletedTodos}\r\n          >\r\n            Clear completed\r\n          </button>\r\n        </footer>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todos: state.todos\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  clearCompletedTodos,\r\n  addTodo\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import todosList from \"./todos.json\";\r\nimport {\r\n  CLEAR_COMPLETED_TODOS,\r\n  TOGGLE_TODO,\r\n  ADD_TODO,\r\n  DELETE_TODO\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  todos: todosList\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case TOGGLE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo =>\r\n          todo.id === action.payload\r\n            ? { ...todo, completed: !todo.completed }\r\n            : todo\r\n        )\r\n      };\r\n    case ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload]\r\n      };\r\n\r\n    case DELETE_TODO:\r\n        return {\r\n            ...state,\r\n            todos: state.todos.filter(todo => todo.id !== action.payload)\r\n        };\r\n\r\n    case CLEAR_COMPLETED_TODOS:\r\n        return {\r\n            ...state,\r\n            todos: state.todos.filter(todo => todo.completed === false)\r\n        };\r\n    default:\r\n        return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./reducers\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}