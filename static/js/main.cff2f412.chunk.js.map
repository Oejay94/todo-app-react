{"version":3,"sources":["TodoItem.jsx","TodoList.jsx","actions.jsx","App.jsx","serviceWorker.js","reducers.jsx","index.jsx"],"names":["TodoItem","className","this","props","completed","type","checked","onChange","handleToggleTodo","title","onClick","handleDeleteTodo","Component","TodoList","todos","map","todo","key","id","deleteTodo","toggleTodo","mapDispatchToProps","payload","connect","App","state","todosList","value","handleInput","event","setState","target","handleCreateTodo","addTodo","counter","i","length","placeholder","autoFocus","onKeyDown","exact","path","render","handleDeleteCompletedTodos","clearCompletedTodos","filter","to","activeClassName","todoTitle","userId","Math","floor","random","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"urBAqBeA,E,iLAjBX,OACE,wBAAIC,UAAWC,KAAKC,MAAMC,UAAY,YAAc,IAClD,yBAAKH,UAAU,QACb,2BACEA,UAAU,SACVI,KAAK,WACLC,QAASJ,KAAKC,MAAMC,UACpBG,SAAUL,KAAKC,MAAMK,mBAEvB,+BAAQN,KAAKC,MAAMM,OACnB,4BAAQR,UAAU,UAAUS,QAASR,KAAKC,MAAMQ,yB,GAZnCC,a,QCGjBC,E,iLACM,IAAD,OACP,OACE,6BAASZ,UAAU,QACjB,wBAAIA,UAAU,aACXC,KAAKC,MAAMW,MAAMC,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVP,iBAAkB,kBAAM,EAAKR,MAAMgB,WAAWH,EAAKE,KACnDT,MAAOO,EAAKP,MACZL,UAAWY,EAAKZ,UAChBI,iBAAkB,kBAAM,EAAKL,MAAMiB,WAAWJ,EAAKE,gB,GAX1CN,aAoBjBS,EAAqB,CACzBF,WCFwB,SAAAD,GACxB,MAAO,CACLb,KAvBuB,cAwBvBiB,QAASJ,IDAXE,WCtBwB,SAAAF,GACxB,MAAO,CACLb,KALuB,cAMvBiB,QAASJ,KDqBEK,cAAQ,KAAMF,EAAdE,CAAkCV,G,eErB3CW,E,2MACJC,MAAQ,CACNX,MAAOY,EACPC,MAAO,I,EAGTC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAEH,MAAOE,EAAME,OAAOJ,S,EAGtCK,iBAAmB,SAAAH,GACC,UAAdA,EAAMZ,MACR,EAAKd,MAAM8B,QAAQ,EAAKR,MAAME,OAC9B,EAAKG,SAAS,CAAEH,MAAO,O,wEAMzB,IAFQ,IAAD,OACHO,EAAU,EACLC,EAAI,EAAGA,EAAIjC,KAAKC,MAAMW,MAAMsB,OAAQD,KACL,IAAlCjC,KAAKC,MAAMW,MAAMqB,GAAG/B,WACtB8B,IAGJ,OACE,6BAASjC,UAAU,WACjB,4BAAQA,UAAU,UAChB,yCACA,2BACEA,UAAU,WACVoC,YAAY,yBACZC,WAAS,EACTX,MAAOzB,KAAKuB,MAAME,MAClBpB,SAAUL,KAAK0B,YACfW,UAAWrC,KAAK8B,oBAGpB,kBAAC,IAAD,CACEQ,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,kBAAC,EAAD,CACAC,2BAA4B,kBAAM,EAAKxC,MAAMyC,qBAC7C9B,MAAO,EAAKX,MAAMW,WAItB,kBAAC,IAAD,CACE0B,OAAK,EACLC,KAAK,UACLC,OAAQ,kBACN,kBAAC,EAAD,CACAC,2BAA4B,kBAAM,EAAKxC,MAAMyC,qBAC7C9B,MAAO,EAAKX,MAAMW,MAAM+B,QAAO,SAAA7B,GAAI,OAAuB,IAAnBA,EAAKZ,kBAIhD,kBAAC,IAAD,CACEoC,OAAK,EACLC,KAAK,aACLC,OAAQ,kBACN,kBAAC,EAAD,CACAC,2BAA4B,kBAAM,EAAKxC,MAAMyC,qBAC7C9B,MAAO,EAAKX,MAAMW,MAAM+B,QAAO,SAAA7B,GAAI,OAAuB,IAAnBA,EAAKZ,kBAIhD,4BAAQH,UAAU,UAChB,0BAAMA,UAAU,cACd,gCAASiC,GADX,iBAGA,wBAAIjC,UAAU,WACZ,4BACE,kBAAC,IAAD,CAAS6C,GAAG,IAAIC,gBAAgB,WAAWP,OAAK,GAAhD,QAIF,4BACE,kBAAC,IAAD,CAASM,GAAG,UAAUC,gBAAgB,YAAtC,WAIF,4BACE,kBAAC,IAAD,CAASD,GAAG,aAAaC,gBAAgB,YAAzC,eAKJ,4BACE9C,UAAU,kBACVS,QAASR,KAAKC,MAAMyC,qBAFtB,yB,GAxFQhC,aA0GZS,EAAqB,CACzBuB,oBDpFiC,WAC/B,MAAO,CACHvC,KAhC6B,0BCmHnC4B,QDxGqB,SAAAe,GACrB,MAAO,CACL3C,KAdoB,WAepBiB,QAAS,CACP2B,OAAQ,EACR/B,GAAIgC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpB3C,MAAOuC,EACP5C,WAAW,MCoGFmB,eAXS,SAACE,GACvB,MAAO,CACLX,MAAOW,EAAMX,SASuBO,EAAzBE,CAA6CC,GC3GxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCVAC,EAAe,CACnB5C,MAAOY,GAoCMiC,MAjCf,WAAgD,IAA/BlC,EAA8B,uDAAtBiC,EAAcE,EAAQ,uCAC7C,OAAQA,EAAOvD,MACb,IHZuB,cGarB,OAAO,eACFoB,EADL,CAEEX,MAAOW,EAAMX,MAAMC,KAAI,SAAAC,GAAI,OACzBA,EAAKE,KAAO0C,EAAOtC,QAAnB,eACSN,EADT,CACeZ,WAAYY,EAAKZ,YAC5BY,OAGV,IHvBoB,WGwBlB,OAAO,eACFS,EADL,CAEEX,MAAM,GAAD,mBAAMW,EAAMX,OAAZ,CAAmB8C,EAAOtC,YAGnC,IH1BuB,cG2BnB,OAAO,eACAG,EADP,CAEIX,MAAOW,EAAMX,MAAM+B,QAAO,SAAA7B,GAAI,OAAIA,EAAKE,KAAO0C,EAAOtC,aAG7D,IHlCiC,wBGmC7B,OAAO,eACAG,EADP,CAEIX,MAAOW,EAAMX,MAAM+B,QAAO,SAAA7B,GAAI,OAAuB,IAAnBA,EAAKZ,eAE/C,QACI,OAAOqB,IC/BToC,EAAQC,YAAYH,GAE1BI,IAASrB,OACL,kBAAC,IAAD,CAAUmB,MAAOA,GACnB,kBAAC,IAAD,CAAeG,SAAUC,mBACvB,kBAAC,EAAD,QAGFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cff2f412.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.completed}\n            onChange={this.props.handleToggleTodo}\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem\n\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { deleteTodo, toggleTodo } from \"./actions\";\nimport { connect } from \"react-redux\";\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {this.props.todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              handleDeleteTodo={() => this.props.deleteTodo(todo.id)}\n              title={todo.title}\n              completed={todo.completed}\n              handleToggleTodo={() => this.props.toggleTodo(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteTodo,\n  toggleTodo\n}\nexport default connect(null, mapDispatchToProps)(TodoList)\n","export const ADD_TODO = \"ADD_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n\nexport const toggleTodo = id => {\n  return {\n    type: TOGGLE_TODO,\n    payload: id\n  };\n};\n\nexport const addTodo = todoTitle => {\n  return {\n    type: ADD_TODO,\n    payload: {\n      userId: 1,\n      id: Math.floor(Math.random() * 1000000),\n      title: todoTitle,\n      completed: false\n    }\n  };\n};\n\nexport const deleteTodo = id => {\n  return {\n    type: DELETE_TODO,\n    payload: id\n  };\n};\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    };\n};\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\nimport TodoList from \"./TodoList\";\nimport { Route, NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { clearCompletedTodos, addTodo } from \"./actions\";\n\nclass App extends Component {\n  state = {\n    todos: todosList,\n    value: \"\"\n  };\n\n  handleInput = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleCreateTodo = event => {\n    if (event.key === \"Enter\") {\n      this.props.addTodo(this.state.value);\n      this.setState({ value: \"\" });\n    }\n  };\n\n  render() {\n    let counter = 0;\n    for (let i = 0; i < this.props.todos.length; i++) {\n      if (this.props.todos[i].completed === false) {\n        counter++;\n      }\n    }\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>Todo List</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            value={this.state.value}\n            onChange={this.handleInput}\n            onKeyDown={this.handleCreateTodo}\n          />\n        </header>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <TodoList\n            handleDeleteCompletedTodos={() => this.props.clearCompletedTodos}\n            todos={this.props.todos}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/active\"\n          render={() => (\n            <TodoList\n            handleDeleteCompletedTodos={() => this.props.clearCompletedTodos}\n            todos={this.props.todos.filter(todo => todo.completed !== true)}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/completed\"\n          render={() => (\n            <TodoList\n            handleDeleteCompletedTodos={() => this.props.clearCompletedTodos}\n            todos={this.props.todos.filter(todo => todo.completed === true)}\n            />\n          )}\n        />\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>{counter}</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <NavLink to=\"/\" activeClassName=\"selected\" exact>\n                All\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/active\" activeClassName=\"selected\">\n                Active\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/completed\" activeClassName=\"selected\">\n                Completed\n              </NavLink>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={this.props.clearCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos\n  }\n}\n\nconst mapDispatchToProps = {\n  clearCompletedTodos,\n  addTodo\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import todosList from \"./todos.json\";\nimport {\n  CLEAR_COMPLETED_TODOS,\n  TOGGLE_TODO,\n  ADD_TODO,\n  DELETE_TODO\n} from \"./actions\";\n\nconst initialState = {\n  todos: todosList\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case TOGGLE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      };\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case DELETE_TODO:\n        return {\n            ...state,\n            todos: state.todos.filter(todo => todo.id !== action.payload)\n        };\n\n    case CLEAR_COMPLETED_TODOS:\n        return {\n            ...state,\n            todos: state.todos.filter(todo => todo.completed === false)\n        };\n    default:\n        return state;\n  }\n}\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}